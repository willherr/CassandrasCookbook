@page "/recipe/{title}"
@page "/recipe/{title}/{isEditMode:bool}/{type:int}"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject Task<IEnumerable<RecipeItem>> _getRecipes
@inject HttpClient HttpClient

@if (Item != null)
{
    @if (IsEditMode)
    {
        <div class="px-3 pt-3">
            @if (HasError)
            {
                <div class="text-danger mb-2">All recipes must have a title, prep time, total time, servings, and an intro image URL. Ingredients must have titles. Steps must have instructions.</div>
            }
            <MatButton Raised="true" OnClick="_ => NewStep = new Step()">Add Step</MatButton>
        </div>
    }

    <div class="mat-layout-grid mat-fab-content">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell">
                <RecipeOverviewComponent Item="Item" IsEditMode="IsEditMode"></RecipeOverviewComponent>
            </div>

            @if (Item.Steps.Any())
            {
                <div class="mat-layout-grid-cell">
                    <div class="mat-layout-grid-inner">
                        @foreach (var step in Item.Steps)
                        {
                            <div class="mat-layout-grid-cell-span-12">
                                <RecipeStep Step="step" IsEditMode="IsEditMode" Recipe="Item" OnRemove="() => { Item.Steps.Remove(step); StateHasChanged(); }"></RecipeStep>
                            </div>
                        }
                    </div>
                </div>                
            }
        </div>
    </div>

    <MatFAB Class="mat-fab" Icon="@(IsEditMode ? MatIconNames.Save : MatIconNames.Share)" OnClick="OnClickFAB"></MatFAB>

    <MatDialog @bind-IsOpen="SavedEditsOpen">
        <MatDialogContent>Either copy or share your recipe with Will to have him update Cassandra's Cookbook! Thank you!</MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="_ => CloseRecipeModal(true)" Raised="true">Copy</MatButton>
            <MatButton OnClick="_ => CloseRecipeModal(false)" Raised="true">Share</MatButton>
        </MatDialogActions>
    </MatDialog>

    @if (NewStep != null)
    {
        <MatDialog IsOpen="true">
            <MatDialogTitle>Add Step</MatDialogTitle>
            <MatDialogContent>
                <div class="mat-layout-grid p-0">
                    <div class="mat-layout-grid-inner">
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12"><MatInputTextComponent Class="w-100" @bind-Value="NewStep.Subtitle" Label="Subtitle"></MatInputTextComponent></div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12"><MatInputTextComponent Class="w-100" @bind-Value="NewStep.ImageUrl" Label="Image URL"></MatInputTextComponent></div>
                        @if (!string.IsNullOrEmpty(NewStep.ImageUrl))
                        {
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12"><img class="w-100" src="@NewStep.ImageUrl" alt="Invalid Image" /></div>
                        }
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12"><MatInputTextComponent Class="w-100" @bind-Value="NewStep.Instructions" Label="Instructions" Required="true" TextArea="true"></MatInputTextComponent></div>

                    </div>
                </div>
                @if (!NewStep.IsValid)
                {
                    <span class="text-danger">Instructions are required for steps.</span>
                }
            </MatDialogContent>
            <MatDialogActions>
                <MatButton Class="mr-2" OnClick="_ => CloseAddStep(false)">Nevermind</MatButton>
                <MatButton OnClick="_ => CloseAddStep(true)">Add it!</MatButton>
            </MatDialogActions>
        </MatDialog>
    }
}

@code {
    [CascadingParameter(Name = "PageLayout")] PageLayout Layout { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public bool IsEditMode { get; set; }
    [Parameter] public CassandrasCookbook.Shared.Recipe.Type Type { get; set; }
    public bool IsNew { get; set; }
    private RecipeItem Item { get; set; }
    private bool SavedEditsOpen { get; set; }
    private bool HasError { get; set; }
    private Step NewStep { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Layout != null)
        {
            Layout.Reset();
            Layout.Layout.Title = Title;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        RecipeListComponent.AllRecipes = await _getRecipes;

        if (IsNew = Title == "new")
        {
            Item = new RecipeItem { Type = Type };
        }
        else
        {
            if ((Item = RecipeListComponent.AllRecipes.FirstOrDefault(x => x.Title == Title)) == null)
            {
                NavigationManager.NavigateTo("404");
            }
        }
    }

    private async Task OnClickFAB()
    {
        if (HasError = IsEditMode && (!Item.IsValid /*|| !await TestImages() - TODO: wasn't working before... needs testing */))
        {
            return;
        }

        if (IsEditMode)
        {
            IsEditMode = false;
            SavedEditsOpen = true;
            if (IsNew)
            {
                RecipeListComponent.NewRecipes.Add(Item);
                NavigationManager.NavigateTo($"recipe/{Item.Title}");
            }
        }
        else
        {
            if (IsNew)
            {
                SavedEditsOpen = true;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("Utility.share", Item.Title, $"Check out the recipe {Item.Title} on Cassandra's Cookbook!");
            }
        }
    }

    private async Task<bool> TestImages()
    {
        return (await Task.WhenAll(
            Item.Steps
                .Select(step => TestImage(step.ImageUrl))
                .Append(TestImage(Item.ImageUrl))
            )).All(result => result);

        async Task<bool> TestImage(string url)
        {
            if (!string.IsNullOrEmpty(url))
            {
                try
                {
                    (await HttpClient.GetAsync(Item.ImageUrl, HttpCompletionOption.ResponseHeadersRead)).EnsureSuccessStatusCode();
                }
                catch (Exception)
                {
                    return false;
                }
            }

            return true;
        }
    }

    private void CloseAddStep(bool value)
    {
        NewStep.SetIsValid();
        if (value)
        {
            if (!NewStep.IsValid)
            {
                return;
            }
            Item.Steps.Add(NewStep);
        }

        NewStep = null;
    }

    private async Task CloseRecipeModal(bool isCopy)
    {
        var itemJson = System.Text.Json.JsonSerializer.Serialize(Item);
        if (isCopy)
        {
            await JSRuntime.InvokeVoidAsync("Utility.copyText", itemJson);
        }
        else
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("Utility.share", $"New Recipe - {Item.Title}", itemJson);
            }
            catch (Exception) { }
        }
        SavedEditsOpen = false;
    }
}
